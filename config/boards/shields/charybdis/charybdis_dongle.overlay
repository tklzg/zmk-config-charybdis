#include "charybdis.dtsi"

#define INPUT_EV_KEY 0x01               /**< Key event */
#define INPUT_EV_REL 0x02               /**< Relative coordinate event */
#define INPUT_EV_ABS 0x03               /**< Absolute coordinate event */
#define INPUT_EV_MSC 0x04               /**< Miscellaneous event */
#define INPUT_EV_VENDOR_START 0xf0      /**< Vendor specific event start */
#define INPUT_EV_VENDOR_STOP 0xff       /**< Vendor specific event stop */

#define INPUT_REL_X 0x00                /**< Relative X coordinate */
#define INPUT_REL_Y 0x01                /**< Relative Y coordinate */
#define INPUT_REL_WHEEL 0x08            /**< Relative wheel coordinate */
#define INPUT_REL_HWHEEL 0x06           /**< Relative horizontal wheel coordinate */
#define INPUT_REL_MISC 0x09             /**< Relative misc coordinate */

/ {
    chosen {
        zephyr,display = &oled;
    };
};


#include "charybdis_trackball.dtsi"


/ {
	/* define virtual input, will be resurrected for emitting input event */
	/* NOTE: set `device = <&pd1>` in `zmk,input-listener` */
	pd1: virtual_input {
		compatible = "zmk,virtual-input";
	};
};

/ {
	/* for central side, define (relay-channel)-to-(virtual-input) mapping */
	input_relay_config_102 {
		compatible = "zmk,split-peripheral-input-relay";
		
		/* channel id, used to filter incoming annotated input event from split peripheral */
		/* NOTE: should matching relay-channel on peripheral overlay */
		relay-channel = <102>;

		/* virtual input device on central, which used to emit input event as an agent device */
		device = <&pd1>;
	};
};

/{
  trackball_listener { 
    compatible = "zmk,input-listener";
    device = <&pd1>;
  };
};

/{
  /* auto toggle mouse key layer */
  trackball_peripheral_auto_mouse_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&pd1>;
        layers = <0 4>;
	    evt-type = <INPUT_EV_REL>;
	    x-input-code = <INPUT_REL_X>;
	    y-input-code = <INPUT_REL_Y>;
        rotate-deg = <310>;
	    scale-multiplier = <1>;
	    scale-divisor = <1>;
        y-invert;
        bindings = <&ib_tog_layer 4>;
   };

   /* input config for mouse scroll mode on momentary mouse scoll layer */
   trackball_peripheral_scroll_listener {
           compatible = "zmk,input-behavior-listener";
           device = <&pd1>;
           layers = <5>;
           evt-type = <INPUT_EV_REL>;
           /* slienting x-axis with alt event code */
           x-input-code = <INPUT_REL_MISC>;
           y-input-code = <INPUT_REL_WHEEL>;   
           /* invent scrolling direction */
           rotate-deg = <310>;
           /* y-invert; */
           scale-multiplier = <1>;
           scale-divisor = <2>;
           /* NOTE 1: This settings do not compitable with y-invert and x-invert */
           /* NOTE 2: Floating point computation requires alot of ram. */
           /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y *   
           /* bind a behavior to down scaling input value to (1/8) */
           /* NOTE: This behavior is different to scale-divisor. */
           /*       The delta value is accumlated until result >= 1 after cast. */
           /*       The scrolling is preented in hi-res and allow precise scrolling */
           /*bindings = <&ib_wheel_scaler_x 1 1 &ib_wheel_scaler_y 1 8>;*/
           bindings = <&ib_wheel_scaler 1 4>;
   };

   /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
   ib_tog_layer: ib_tog_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <1400>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
        ib_wheel_scaler: ib_wheel_scaler {
                compatible = "zmk,input-behavior-scaler";
                #binding-cells = <2>;
                evt-type = <INPUT_EV_REL>;
                input-code = <INPUT_REL_WHEEL>;
        };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler_x: ib_wheel_scaler_x {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;
    };

    ib_wheel_scaler_y: ib_wheel_scaler_y {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    ib_snipe_scaler_x: ib_snipe_scaler_x {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_X>;
    };

    ib_snipe_scaler_y: ib_snipe_scaler_y {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_Y>;
    };
};

&pinctrl {
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 6)>,
                <NRF_PSEL(TWIM_SCL, 0, 10)>;
        };
    };

    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 6)>,
                <NRF_PSEL(TWIM_SCL, 0, 10)>;
            low-power-enable;
        };
    };	
}; 

&i2c0 {
	status = "okay";
	compatible = "nordic,nrf-twi";
    pinctrl-0 = <&i2c0_default>;
    pinctrl-1 = <&i2c0_sleep>;
	oled: sh1106@3c {
        compatible = "sinowealth,sh1106";
        reg = <0x3c>;
        width = <129>;
        height = <64>;
        segment-offset = <1>;
        page-offset = <0>;
        display-offset = <0>;
        multiplex-ratio = <63>;
        segment-remap;
        com-invdir;
        inversion-on;
        prechargep = <0x22>;
	};
};